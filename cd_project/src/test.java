/* Generated By:JavaCC: Do not edit this line. test.java */
 import nodes.*;
import java.util.HashMap;

public class test implements testConstants {

   public static void main(String args []) throws ParseException  {   test parser = new test(System.in);
   try {
 statmentNode t= parser.start();
 t.execute(); }catch(Exception e)
  {System.out.print(e); }    }

  static final public statmentNode statment() throws ParseException {
                           switchNode sw=null;statmentNode st=new statmentNode();idNode ind=null;fornode fn=null;dowhilenode dw=null;whilenode w=null;printNode f1;generalif f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOOP:
    case CASE:
    case IF:
    case FOR:
    case WHILE:
    case PRINT:
    case ID:
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          sw = switch_statment();
                        st.add(sw);st.addtype("switch");
          break;
        case ID:
          ind = identify();
                                                                           try {st.add(ind); st.addtype("id");}catch(Exception e) { }
          break;
        case FOR:
          fn = for_statment();
                    try {st.add(fn);st.addtype("for"); }catch(Exception e) { }
          break;
        case LOOP:
          dw = do_while();
                try {st.add(dw);st.addtype("dowhile"); }catch(Exception e) { }
          break;
        case PRINT:
          f1 = print_statment();
                      try {  st.add(f1);st.addtype("print"); }catch(Exception e) { }
          break;
        case WHILE:
          w = while_statment();
                     try { st.add(w);st.addtype("while"); }catch(Exception e) { System.out.print(e.toString());}
          break;
        case IF:
          f = if_statment();
                  try {  st.add(f);st.addtype("if"); }catch(Exception e) { }
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOOP:
        case CASE:
        case IF:
        case FOR:
        case WHILE:
        case PRINT:
        case ID:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(END);
                                                                                         {if (true) return st;}
      break;
    default:
      jj_la1[2] = jj_gen;
      ex();
    }
    throw new Error("Missing return statement in function");
  }

  static final public statmentNode statement() throws ParseException {
                             switchNode sw=null;statmentNode st=new statmentNode();idNode ind=null;fornode fn=null;dowhilenode dw=null;whilenode w=null;printNode f1;generalif f;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        sw = switch_statment();
                        st.add(sw);st.addtype("switch");
        break;
      case ID:
        ind = identify();
                                                                           try {st.add(ind); st.addtype("id");}catch(Exception e) { }
        break;
      case FOR:
        fn = for_statment();
                    try {st.add(fn);st.addtype("for"); }catch(Exception e) { }
        break;
      case LOOP:
        dw = do_while();
                try {st.add(dw);st.addtype("dowhile"); }catch(Exception e) { }
        break;
      case PRINT:
        f1 = print_statment();
                      try {  st.add(f1);st.addtype("print"); }catch(Exception e) { }
        break;
      case WHILE:
        w = while_statment();
                     try { st.add(w);st.addtype("while"); }catch(Exception e) { System.out.print(e.toString());}
        break;
      case IF:
        f = if_statment();
                  try {  st.add(f);st.addtype("if"); }catch(Exception e) { }
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOOP:
      case CASE:
      case IF:
      case FOR:
      case WHILE:
      case PRINT:
      case ID:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
    }
                                                                                  {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  static final public printNode print_statment() throws ParseException {
   Token value=null; calNode r=null;
    jj_consume_token(PRINT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
    case ID:
    case INT:
    case DOUBLE:
    case STRING:
      r = arthmitac();
      break;
    case TRUE:
      value = jj_consume_token(TRUE);
      break;
    case FALSE:
      value = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if(value!=null) {
r=new calNode();
doublenode temp=new doublenode(value.image,value.kind);
r.add(temp);
printNode temp1=new printNode();
temp1.add(r);
try {
{if (true) return temp1;} }
catch(Exception e) { }
  }
  else {
    printNode temp1=new printNode();
temp1.add(r);
    try {
{if (true) return temp1;}}
catch(Exception e) { }
    }
    throw new Error("Missing return statement in function");
  }

  static final public dowhilenode do_while() throws ParseException {
                          dowhilenode dw=new dowhilenode();statmentNode p=new statmentNode();condtio c=new condtio();
    jj_consume_token(LOOP);
    jj_consume_token(DO);
    p = statement();
                                dw.add(p);
    jj_consume_token(IF);
    c = condtio();
                                                               dw.add(c);
    jj_consume_token(BREAK);
    jj_consume_token(END);
                                                                                             {if (true) return dw;}
    throw new Error("Missing return statement in function");
  }

  static final public condtio condtio() throws ParseException {
                    condtio c1=null,temp3=new condtio();Token t1=null,t2=null,t3=null;calNode r=null,r2=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
      t1 = jj_consume_token(FALSE);
      break;
    case TRUE:
      t1 = jj_consume_token(TRUE);
      break;
    case INPUT:
    case ID:
    case INT:
    case DOUBLE:
    case STRING:
      r = arthmitac();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t2 = jj_consume_token(EQ);
        break;
      case LE:
        t2 = jj_consume_token(LE);
        break;
      case GE:
        t2 = jj_consume_token(GE);
        break;
      case NE:
        t2 = jj_consume_token(NE);
        break;
      case LT:
        t2 = jj_consume_token(LT);
        break;
      case GT:
        t2 = jj_consume_token(GT);
        break;
      default:
        jj_la1[6] = jj_gen;
        ex1();
      }
      r2 = arthmitac();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                    if(t1!=null) {
doublenode temp=new doublenode(t1.image,t1.kind);
calNode temp2=new calNode();
temp2.add(temp);

temp3.add(temp2);

}
else {
temp3.add(r);
doublenode temp=new doublenode(t2.image,t2.kind);
temp3.add(temp);
temp3.add(r2);

 }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case OR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        t3 = jj_consume_token(AND);
        break;
      case OR:
        t3 = jj_consume_token(OR);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      c1 = condtio();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
                    if(t3!=null) {

temp3.set(t3.image);
temp3.add(c1); }
                     {if (true) return temp3;}
    throw new Error("Missing return statement in function");
  }

  static final public calNode arthmitac() throws ParseException {
                       calNode print=new calNode();doublenode t1,t2,t3; Token first,second=null,third=null;boolean firsttime=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
      first = jj_consume_token(INPUT);
      break;
    case ID:
      first = jj_consume_token(ID);
      break;
    case INT:
      first = jj_consume_token(INT);
      break;
    case DOUBLE:
      first = jj_consume_token(DOUBLE);
      break;
    case STRING:
      first = jj_consume_token(STRING);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case R:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        second = jj_consume_token(PLUS);
        break;
      case MINUS:
        second = jj_consume_token(MINUS);
        break;
      case MULTIPLY:
        second = jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        second = jj_consume_token(DIVIDE);
        break;
      case R:
        second = jj_consume_token(R);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
        third = jj_consume_token(INPUT);
        break;
      case ID:
        third = jj_consume_token(ID);
        break;
      case INT:
        third = jj_consume_token(INT);
        break;
      case DOUBLE:
        third = jj_consume_token(DOUBLE);
        break;
      case STRING:
        third = jj_consume_token(STRING);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
  if(!firsttime) {
    t1=new doublenode(first.image,first.kind);

    print.add(t1);
firsttime=true;
    }
    t2=new doublenode(second.image,second.kind);
        t3=new doublenode(third.image,third.kind);
            print.add(t2);
                        print.add(t3);
    }
  if(!firsttime) {
    t1=new doublenode(first.image,first.kind);

    print.add(t1);
firsttime=true;
    }
{if (true) return print;}
    throw new Error("Missing return statement in function");
  }

  static final public generalif if_statment() throws ParseException {
                           Token t11,t12=null,t13=null;generalif h=new generalif();condtio t1,t2=null;
 statmentNode p1,p2=null,p3=null;boolean firsttime=false;
    t11 = jj_consume_token(IF);
    t1 = condtio();
    p1 = statement();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSIF:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_4;
      }
      t12 = jj_consume_token(ELSIF);
      t2 = condtio();
      p2 = statement();
                                             if(!firsttime) {
  ifNode l=new ifNode(t11.image);
 l.add(t1);
 l.add(p1);
 h.add(l);
firsttime=true;
  }
  if(t12!=null) {
  ifNode l=new ifNode(t12.image);
 l.add(t2);
 l.add(p2); h.add(l); }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      t13 = jj_consume_token(ELSE);
      p3 = statement();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
                                  if(!firsttime) {
  ifNode l=new ifNode(t11.image);
 l.add(t1);
 l.add(p1);
 h.add(l);
firsttime=true;
  }

  if(t13!=null) {
  ifNode l=new ifNode(t13.image);

 l.add(p3); h.add(l); }
    jj_consume_token(END);
           {if (true) return h;}
    throw new Error("Missing return statement in function");
  }

  static final public whilenode while_statment() throws ParseException {
                                 Boolean first=false;
    whilenode w=new whilenode();
    condtio c=new condtio();
    statmentNode p=new statmentNode();
    jj_consume_token(WHILE);
    c = condtio();
    label_5:
    while (true) {
      p = statement();
                 if(!first) {
w.add(c);
first=true;
   }
   w.add(p);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOOP:
      case CASE:
      case IF:
      case FOR:
      case WHILE:
      case PRINT:
      case ID:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
    }
    jj_consume_token(END);
          {if (true) return w;}
    throw new Error("Missing return statement in function");
  }

  static final public fornode for_statment() throws ParseException {
                           Boolean first=false;fornode n=null;statmentNode r=new statmentNode();Token t1,t2,t3;
    jj_consume_token(FOR);
    t1 = jj_consume_token(ID);
    jj_consume_token(IN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t2 = jj_consume_token(ID);
      break;
    case INT:
      t2 = jj_consume_token(INT);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DOT);
    jj_consume_token(DOT);
    jj_consume_token(DOT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t3 = jj_consume_token(ID);
      break;
    case INT:
      t3 = jj_consume_token(INT);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    r = statement();
if(!first) {
n=new fornode(t2.image,t3.image,t2.kind,t3.kind,t1.image);
  first=true;}
  n.add(r);
    jj_consume_token(END);
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public idNode identify() throws ParseException {
                    idNode r=null;Token t1=null,t2=null,t3=null;calNode c;
    if (jj_2_1(3)) {
      t1 = jj_consume_token(ID);
      t2 = jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t3 = jj_consume_token(TRUE);
        break;
      case FALSE:
        t3 = jj_consume_token(FALSE);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                             // bool 34 | 35

                 if(t3!=null) {  r=new idNode(t1.image,t2.image,t3.kind);
                 {if (true) return r;}}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t1 = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          t2 = jj_consume_token(ASSIGN);
          break;
        case PLUSASSIGN:
          t2 = jj_consume_token(PLUSASSIGN);
          break;
        case MINUSASSIGN:
          t2 = jj_consume_token(MINUSASSIGN);
          break;
        case STARASSIGN:
          t2 = jj_consume_token(STARASSIGN);
          break;
        case SLASHASSIGN:
          t2 = jj_consume_token(SLASHASSIGN);
          break;
        case REMASSIGN:
          t2 = jj_consume_token(REMASSIGN);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        c = arthmitac();
                  // bool 34 | 35

                 if(t3!=null) {  r=new idNode(t1.image,t2.image,t3.kind);
                 {if (true) return r;}}else { r=new idNode(t1.image,t2.image,80);
                 r.add(c);
                 {if (true) return r;} }
               {if (true) return r;}
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public caseNode cases() throws ParseException {
                   caseNode c=new caseNode();Token t1=null,t2=null;statmentNode n=null;
    jj_consume_token(WHEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t1 = jj_consume_token(ID);
      break;
    case INT:
      t1 = jj_consume_token(INT);
      break;
    case DOUBLE:
      t1 = jj_consume_token(DOUBLE);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t2 = jj_consume_token(ID);
        break;
      case INT:
        t2 = jj_consume_token(INT);
        break;
      case DOUBLE:
        t2 = jj_consume_token(DOUBLE);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    n = statement();
doublenode temp=new doublenode(t1.image,t1.kind);
calNode temp2=new calNode();
temp2.add(temp);
c.add(temp2);
if(t2!=null) {  temp=new doublenode(t2.image,t2.kind);
 temp2=new calNode();
temp2.add(temp);
c.add(temp2);}
    c.add(n);
{if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public switchNode switch_statment() throws ParseException {
                                   caseNode c=null;switchNode s=null;Token t1,t2=null; statmentNode n=null;
    jj_consume_token(CASE);
    t1 = jj_consume_token(ID);
                       s=new switchNode(t1.image);
doublenode temp=new doublenode(t1.image,t1.kind);
calNode temp2=new calNode();
temp2.add(temp);
s.add(temp2);
    label_6:
    while (true) {
      c = cases();
                if(c!=null)s.add(c);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_6;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      t2 = jj_consume_token(ELSE);
      n = statement();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(END);
if(t2!=null) {
  s.set("else");
s.add(n);
  }
   {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public statmentNode start() throws ParseException {
                      statmentNode f=new statmentNode();
    f = statment();
   {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static void ex() throws ParseException {
ParseException e=generateParseException();
System.out.println("statement is ignored");
Token t;
do {
t=getNextToken();
   }while(t.kind!=END);
  }

  static void ex1() throws ParseException {
ParseException e=generateParseException();
System.out.println("statement is ignored");
Token t;
do {
t=getNextToken();
   }while(t.kind!=LE && t.kind!=GE && t.kind!=LT && t.kind!=NE && t.kind!=GT && t.kind!=EQ);
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public testTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0xbe0000,0x0,0x0,0x0,0x0,0xf80,0xf80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f000,0x0,0x0,0x0,0x8000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x24a8088,0x24a8088,0x24a8088,0x24a8088,0x24a8088,0x72000070,0x0,0x72000070,0x300000,0x300000,0x72000010,0x0,0x0,0x72000010,0x10000,0x200,0x24a8088,0x12000000,0x12000000,0x60,0x4000000,0x2000000,0x32000000,0x32000000,0x0,0x400,0x200,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public test(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public test(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new testTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public test(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new testTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public test(testTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(testTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                              }
